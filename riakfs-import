#!/usr/bin/perl

use RiakFuse;
use RiakFuse::Data;
use RiakFuse::HTTP;
use RiakFuse::Filepath;
use Getopt::Long;
use HTTP::Date;
use strict;
my $fsname;
my $server;
my $src;
my $dst;
my $clean = 0;
my $exclude = "";
use File::stat;
GetOptions("clean"     => \$clean,
	   "server=s"  => \$server,
	   "fsname=s"  => \$fsname,
	   "src=s" => \$src,
	   "dst=s"  => \$dst,
	   "exclude=s" => \$exclude,
    );
die "Please tell me what server I should be using (--server=127.0.0.1:8091)\n" unless $server;
die "Please tell me the name of the filesystem (--fsname=mytestfs) (maps to a bucket)\n" unless $fsname;
die unless $src;
die unless $dst;

RiakFuse::HTTP->CLONE();

$RiakFuse::servers{$server} = 1;
$RiakFuse::params{filebucket} = $fsname;
$RiakFuse::params{trace} = 0;

my $depth = 0;
my @target_path = split "/", $dst;
my $orig_dir = join "/", @target_path;
sub import_dir {
    my $dir = shift;
    push @target_path, $dir if($dir ne '.');
    $depth++;
    print ">" x $depth;
    print "import directory $dir into @{[join('/',@target_path)]}\n";
    opendir(my $dh, $dir) || die;
    chdir($dir);
    my @files;
    my @dirs;
    for(readdir($dh)) {
	if($_ eq $exclude) {
	    print "Excluding $_ == $exclude\n";
	    next;
	}
	next if(-l $_);
	next if($_ eq '.');
	next if($_ eq '..');
	if(-d $_) {
	    push @dirs, $_;
	} else {
	    push @files, $_;
	}
    }
    closedir($dh);
    make_dir(join("/", @target_path), \@files, \@dirs);
    print ((">" x ($depth + 1)) . "import file $_\n") for @files;
    import_dir($_) for @dirs;
    chdir("..");
    print "<" x $depth;
    print "\n";
    $depth--;
    pop @target_path;
}

sub make_dir {
    my $target = shift;
    my $files = shift;
    my $dirs = shift;
    my $file = RiakFuse::Filepath->new($target);
    my $cwd = RiakFuse::Data->get($file);
   
    my $content = (ref($cwd) && $cwd->{content}) || {
	'.' => {},
	'..' => {},
    };
    foreach my $dir (map { RiakFuse::Filepath->new($target."/$_")} @$dirs) {
	
	next if (exists($content->{$dir->name}));
	my $st = stat ($dir->name);
	my $type = $st->mode >> 0;
	my $mode = ($st->mode - ($type << 9));

	$content->{$dir->name} = {
	    atime => time,
	    ctime => time,
	    filename => $file->orig,
	    mode => $mode,
	    type => $type,
	    uid => $st->uid,
	    gid => $st->gid,,
	};
	RiakFuse::Data->put($dir,
			    { 
				'content' => {
				    '.' => {},
				    '..' => {},
				},
				'content-type' => 'application/json',
				'X-Riak-Meta-Last-Modified' => time2str($st->mtime),
			    },
	    );
    }
    foreach my $f (map { RiakFuse::Filepath->new($target . "/$_")} @$files) {
	my $st = stat($f->name);
	my $type = $st->mode >> 0;
	my $mode = ($st->mode - ($type << 9));
	$content->{$f->name} = {
	    atime => $st->atime,
	    ctime => $st->ctime,
	    filename => $f->orig,
	    mode => $mode,
	    type => $type,
	    uid => $st->uid,
	    gid => $st->gid,,
	};
	local($/);
	
	open(my $fh, $f->name) || die $f->name;
	RiakFuse::Data->put($f,
			    {
				'content-type' => 'application/octect-stream',
				'X-Riak-Meta-Last-Modified' => time2str($st->mtime),
				'content' => <$fh>,
			    });
	close($fh);
    }
    RiakFuse::Data->put($file, { 'content-type' => 'application/json', content => $content });

}
{

    my $tpath = "";
    foreach my $path (split "/", $orig_dir) {
	$tpath .= "/" if $tpath ne '/';
	$tpath .= "$path" ;
	my $file = RiakFuse::Filepath->new($tpath);
	if($tpath ne '/') {
	    my $parent = RiakFuse::Data->get($file->parent);
	    next if exists $parent->{content}->{$file->name};
	    print "creating $file->{name} ($tpath)\n";
	    $parent->{content}->{$file->name} = {
		atime => time,
		ctime => time,
		uid => $<,
		gid => int($(),
		type => 0040,
		mode => 0755,
		key => $file->key,
	    };
	    RiakFuse::Data->put($file->parent, $parent);
	    RiakFuse::Data->put($file, { 'content-type' => "application/json", 'content' => { '.' => {}, '..' => {}}});
	}
    }
}

chdir($src);
import_dir(".");
exit;
my $file = RiakFuse::Filepath->new($orig_dir);
my $parent = RiakFuse::Data->get($file->parent);

$parent->{content}->{$file->name} =
{
    atime => time,
    ctime => time,
    filename => $file->orig,
    mode => 0755,
    type => 0040,
    uid => $<,
    gid => int($(),
};

RiakFuse::Data->put($file->parent, "application/json", $parent->{content});
